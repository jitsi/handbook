"use strict";(self.webpackChunk_jitsi_handbook=self.webpackChunk_jitsi_handbook||[]).push([[8170],{2537:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var t=n(4848),i=n(8453);const s={id:"mobile-google-auth",title:"Setting up Google sign-in integration"},l=void 0,r={id:"dev-guide/mobile-google-auth",title:"Setting up Google sign-in integration",description:"- Create a Firebase project here//firebase.google.com/. You'll need a",source:"@site/docs/dev-guide/mobile-google-auth.md",sourceDirName:"dev-guide",slug:"/dev-guide/mobile-google-auth",permalink:"/handbook/docs/dev-guide/mobile-google-auth",draft:!1,unlisted:!1,editUrl:"https://github.com/jitsi/handbook/edit/master/docs/dev-guide/mobile-google-auth.md",tags:[],version:"current",lastUpdatedAt:1742405246e3,frontMatter:{id:"mobile-google-auth",title:"Setting up Google sign-in integration"}},a={},c=[];function d(e){const o={a:"a",code:"code",li:"li",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(o.ul,{children:["\n",(0,t.jsxs)(o.li,{children:["Create a Firebase project here: ",(0,t.jsx)(o.a,{href:"https://firebase.google.com/",children:"https://firebase.google.com/"}),". You'll need a\nsigned Android build for that, that can be a debug self-signed build too, just\nretrieve the signing hash. The key hash of an already signed ap can be obtained\nas follows (on macOS): ",(0,t.jsx)(o.code,{children:"keytool -list -printcert -jarfile the-app.apk"})]}),"\n",(0,t.jsxs)(o.li,{children:["Place the generated ",(0,t.jsx)(o.code,{children:"google-services.json"})," file in ",(0,t.jsx)(o.code,{children:"android/app"}),"\nfor Android and the ",(0,t.jsx)(o.code,{children:"GoogleService-Info.plist"})," into ",(0,t.jsx)(o.code,{children:"ios/app"})," for\niOS (you can stop at that step, no need for the driver and the code changes they\nsuggest in the wizard)."]}),"\n",(0,t.jsxs)(o.li,{children:["You may want to exclude these files in YOUR GIT config (do not exclude them in\nthe ",(0,t.jsx)(o.code,{children:".gitignore"})," of the application itself!)."]}),"\n",(0,t.jsxs)(o.li,{children:["Your web client ID is auto generated during the Firebase project\ncreation. Find them in the Google Developer console\n(",(0,t.jsx)(o.a,{href:"https://console.developers.google.com/",children:"https://console.developers.google.com/"}),")"]}),"\n",(0,t.jsxs)(o.li,{children:["Make sure your config reflects this ID by setting\n",(0,t.jsx)(o.code,{children:"googleApiApplicationClientID"})," in config.js."]}),"\n",(0,t.jsxs)(o.li,{children:["Add your iOS client ID (the REVERSED_CLIENT_ID in the plist file) as an\napplication URL schema into ",(0,t.jsx)(o.code,{children:"ios/app/src/Info.plist"}),"\n(replacing placeholder)."]}),"\n",(0,t.jsx)(o.li,{children:"Enable YouTube API access on the developer console (see above) to enable live\nstreaming."}),"\n"]})}function h(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,o,n)=>{n.d(o,{R:()=>l,x:()=>r});var t=n(6540);const i={},s=t.createContext(i);function l(e){const o=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function r(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:o},e.children)}}}]);