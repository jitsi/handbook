"use strict";(self.webpackChunk_jitsi_handbook=self.webpackChunk_jitsi_handbook||[]).push([[4955],{3966:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var t=i(4848),a=i(8453);const r={id:"dev-guide-iframe-events",title:"Events"},s=void 0,o={id:"dev-guide/dev-guide-iframe-events",title:"Events",description:"The JitsiMeetExternalAPI object implements the [EventEmitter] API for emitting and listening for events.",source:"@site/docs/dev-guide/iframe-events.md",sourceDirName:"dev-guide",slug:"/dev-guide/dev-guide-iframe-events",permalink:"/handbook/docs/dev-guide/dev-guide-iframe-events",draft:!1,unlisted:!1,editUrl:"https://github.com/jitsi/handbook/edit/master/docs/dev-guide/iframe-events.md",tags:[],version:"current",lastUpdatedAt:1750596069e3,frontMatter:{id:"dev-guide-iframe-events",title:"Events"},sidebar:"docs",previous:{title:"Commands",permalink:"/handbook/docs/dev-guide/dev-guide-iframe-commands"},next:{title:"React SDK",permalink:"/handbook/docs/dev-guide/dev-guide-react-sdk"}},c={},d=[{value:"cameraError",id:"cameraerror",level:3},{value:"avatarChanged",id:"avatarchanged",level:3},{value:"audioAvailabilityChanged",id:"audioavailabilitychanged",level:3},{value:"audioMuteStatusChanged",id:"audiomutestatuschanged",level:3},{value:"breakoutRoomsUpdated",id:"breakoutroomsupdated",level:3},{value:"browserSupport",id:"browsersupport",level:3},{value:"contentSharingParticipantsChanged",id:"contentsharingparticipantschanged",level:3},{value:"customNotificationActionTriggered",id:"customnotificationactiontriggered",level:3},{value:"dataChannelOpened",id:"datachannelopened",level:3},{value:"endpointTextMessageReceived",id:"endpointtextmessagereceived",level:3},{value:"nonParticipantMessageReceived",id:"nonparticipantmessagereceived",level:3},{value:"faceLandmarkDetected",id:"facelandmarkdetected",level:3},{value:"errorOccurred",id:"erroroccurred",level:3},{value:"knockingParticipant",id:"knockingparticipant",level:3},{value:"largeVideoChanged",id:"largevideochanged",level:3},{value:"log",id:"log",level:3},{value:"micError",id:"micerror",level:3},{value:"screenSharingStatusChanged",id:"screensharingstatuschanged",level:3},{value:"dominantSpeakerChanged",id:"dominantspeakerchanged",level:3},{value:"raiseHandUpdated",id:"raisehandupdated",level:3},{value:"tileViewChanged",id:"tileviewchanged",level:3},{value:"chatUpdated",id:"chatupdated",level:3},{value:"incomingMessage",id:"incomingmessage",level:3},{value:"mouseEnter",id:"mouseenter",level:3},{value:"mouseLeave",id:"mouseleave",level:3},{value:"mouseMove",id:"mousemove",level:3},{value:"participantMenuButtonClick",id:"participantmenubuttonclick",level:3},{value:"toolbarButtonClicked",id:"toolbarbuttonclicked",level:3},{value:"outgoingMessage",id:"outgoingmessage",level:3},{value:"displayNameChange",id:"displaynamechange",level:3},{value:"deviceListChanged",id:"devicelistchanged",level:3},{value:"emailChange",id:"emailchange",level:3},{value:"feedbackSubmitted",id:"feedbacksubmitted",level:3},{value:"filmstripDisplayChanged",id:"filmstripdisplaychanged",level:3},{value:"moderationStatusChanged",id:"moderationstatuschanged",level:3},{value:"moderationParticipantApproved",id:"moderationparticipantapproved",level:3},{value:"moderationParticipantRejected",id:"moderationparticipantrejected",level:3},{value:"notificationTriggered",id:"notificationtriggered",level:3},{value:"participantJoined",id:"participantjoined",level:3},{value:"participantKickedOut",id:"participantkickedout",level:3},{value:"participantLeft",id:"participantleft",level:3},{value:"participantRoleChanged",id:"participantrolechanged",level:3},{value:"participantsPaneToggled",id:"participantspanetoggled",level:3},{value:"passwordRequired",id:"passwordrequired",level:3},{value:"videoConferenceJoined",id:"videoconferencejoined",level:3},{value:"videoConferenceLeft",id:"videoconferenceleft",level:3},{value:"conferenceCreatedTimestamp",id:"conferencecreatedtimestamp",level:3},{value:"videoAvailabilityChanged",id:"videoavailabilitychanged",level:3},{value:"videoMuteStatusChanged",id:"videomutestatuschanged",level:3},{value:"videoQualityChanged",id:"videoqualitychanged",level:3},{value:"readyToClose",id:"readytoclose",level:3},{value:"recordingLinkAvailable",id:"recordinglinkavailable",level:3},{value:"recordingStatusChanged",id:"recordingstatuschanged",level:3},{value:"subjectChange",id:"subjectchange",level:3},{value:"suspendDetected",id:"suspenddetected",level:3},{value:"peerConnectionFailure",id:"peerconnectionfailure",level:3},{value:"transcribingStatusChanged",id:"transcribingstatuschanged",level:3},{value:"transcriptionChunkReceived",id:"transcriptionchunkreceived",level:3},{value:"whiteboardStatusChanged",id:"whiteboardstatuschanged",level:3},{value:"p2pStatusChanged",id:"p2pstatuschanged",level:3},{value:"audioOnlyChanged",id:"audioonlychanged",level:3}];function l(e){const n={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"JitsiMeetExternalAPI"})," object implements the ",(0,t.jsx)(n.a,{href:"https://nodejs.org/api/events.html",children:"EventEmitter"})," API for emitting and listening for events."]}),"\n",(0,t.jsxs)(n.p,{children:["You can add event listeners to the embedded Jitsi Meet using the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"addListener"})})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"api.addListener(event, listener);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If you want to remove a listener you can use the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"removeListener"})})," method:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"api.removeListener(event, listener);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"event"})})," parameter is a string object with the name of the event."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"listener"})})," parameter is a function object with one argument that creates a notification when the event occurs along with related event data."]}),"\n",(0,t.jsx)(n.p,{children:"The following events are currently supported:"}),"\n",(0,t.jsx)(n.h3,{id:"cameraerror",children:"cameraError"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about Jitsi Meet having failed to access the meeting camera."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    type: string, // A constant representing the overall type of the error.\n    message: string // Additional information about the error.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"avatarchanged",children:"avatarChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about changes to a participant's avatar."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string, // the id of the participant that changed his avatar.\n    avatarURL: string // the new avatar URL.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"audioavailabilitychanged",children:"audioAvailabilityChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about changes to audio availability status."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    available: boolean // new available status - boolean\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"audiomutestatuschanged",children:"audioMuteStatusChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about changes to audio mute status."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    muted: boolean // new muted status - boolean\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"breakoutroomsupdated",children:"breakoutRoomsUpdated"}),"\n",(0,t.jsx)(n.p,{children:"Provides notifications about breakout rooms changes."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    [roomId]: {\n        id: string,\n        jid: string,\n        name: string,\n        isMainRoom: true | undefined,\n        participants: {\n            [participantJid]: {\n                displayName: string,\n                jid: string,\n                role: string\n            }\n        }\n    },\n    ...\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"browsersupport",children:"browserSupport"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about the current browser support."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    supported: boolean\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"contentsharingparticipantschanged",children:"contentSharingParticipantsChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides real-time list of currently screen sharing participant ID's."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'{\n    data: ["particId1", "particId2", ...]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"customnotificationactiontriggered",children:"customNotificationActionTriggered"}),"\n",(0,t.jsxs)(n.p,{children:["Callback that triggers for custom actions defined for the ",(0,t.jsx)(n.a,{href:"https://jitsi.github.io/handbook/docs/dev-guide/dev-guide-iframe-commands/#shownotification",children:"showNotification"})," command"]}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    data: {\n        id: string // uuid of the triggered action\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"datachannelopened",children:"dataChannelOpened"}),"\n",(0,t.jsx)(n.p,{children:"Indicates the data channel is open and thus messages can be sent over it."}),"\n",(0,t.jsx)(n.h3,{id:"endpointtextmessagereceived",children:"endpointTextMessageReceived"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about a text messages received through data channels."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    senderInfo: {\n        jid: string, // the jid of the sender\n        id: string // the participant id of the sender\n    },\n    eventData: {\n        name: string, // the name of the datachannel event: `endpoint-text-message`\n        text: string // the received text from the sender\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"nonparticipantmessagereceived",children:"nonParticipantMessageReceived"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about a messages sent by a non-participant, e.g. a custom prosody message."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n        id: string, // the id of the message, may be null\n        message: string // the message received\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"facelandmarkdetected",children:"faceLandmarkDetected"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications when a face landmark is detected"}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    faceBox: {\n        left: number, // face bounding box distance as percentage from the left video edge\n        right: number // face bounding box distance as percentage from the right video edge\n        width: number // face bounding box width as percentage of the total video width\n    }, // this might be undefined if config.faceLandmarks.faceCenteringThreshold is not passed\n    faceExpression: string // check https://github.com/jitsi/jitsi-meet/blob/master/react/features/face-landmarks/constants.js#L3 for available values\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"erroroccurred",children:"errorOccurred"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about an error which has occurred."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    details: Object?, // additional error details\n    message: string?, // the error message\n    name: string, // the coded name of the error\n    type: string, // error type/source, one of : 'CONFIG', 'CONNECTION', 'CONFERENCE'\n    isFatal: boolean // whether this is a fatal error which triggered a reconnect overlay or not\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"knockingparticipant",children:"knockingParticipant"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about a knocking participant in the lobby."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    participant: {\n        // the id and name of the participant that is currently knocking in the lobby\n        id: string,\n        name: string\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"largevideochanged",children:"largeVideoChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about changes in the large video display."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string // id of the participant that is now on large video in the stage view.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"log",children:"log"}),"\n",(0,t.jsxs)(n.p,{children:["Provides log event notifications with the log level being one of the values specified in the ",(0,t.jsx)(n.a,{href:"https://github.com/jitsi/jitsi-meet/blob/master/config.js",children:"config.js"})," file in the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"apiLogLevels"})})," property (if not specified the event does not fire)."]}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    logLevel: string, // A constant representing the log type (info, error, debug, warn).\n    args: string // Additional log information.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"micerror",children:"micError"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about Jitsi Meet issues with mic access."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    type: string, // A constant representing the overall type of the error.\n    message: string // Additional information about the error.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"screensharingstatuschanged",children:"screenSharingStatusChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about either turning on or off local user screen sharing."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    on: boolean, //whether screen sharing is on\n    details: {\n\n        // From where the screen sharing is capturing, if known. Values which are\n        // passed include 'window', 'screen', 'proxy', 'device'. The value undefined\n        // will be passed if the source type is unknown or screen share is off.\n        sourceType: string|undefined\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dominantspeakerchanged",children:"dominantSpeakerChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about dominant speaker changes."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string //participantId of the new dominant speaker\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"raisehandupdated",children:"raiseHandUpdated"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about the participant raising/lowering the hand."}),"\n",(0,t.jsx)(n.p,{children:"The listener will receive an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string,         // participantId of the user who raises/lowers the hand\n    handRaised: number  // 0 when hand is lowered and the hand raised timestamp when raised.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"tileviewchanged",children:"tileViewChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about entrance or exit from the tile view layout mode."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    enabled: boolean, // whether tile view is not displayed or not\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"chatupdated",children:"chatUpdated"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about chat state being updated."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    isOpen: boolean, // Whether the chat panel is open or not\n    unreadCount: number // The unread messages counter\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"incomingmessage",children:"incomingMessage"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about incoming chat messages."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    from: string, // the id of the user that sent the message\n    nick: string, // the nickname of the user that sent the message\n    privateMessage: boolean, // whether this is a private or group message\n    message: string // the text of the message\n    stamp: string // the message timestamp as string (ISO-8601)\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mouseenter",children:"mouseEnter"}),"\n",(0,t.jsxs)(n.p,{children:["Provides event notifications when mouse enters the iframe.\nThe listener receives an object with the following structure based on ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent",children:"MouseEvent"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    event: {\n        clientX,\n        clientY,\n        movementX,\n        movementY,\n        offsetX,\n        offsetY,\n        pageX,\n        pageY,\n        x,\n        y,\n        screenX,\n        screenY\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mouseleave",children:"mouseLeave"}),"\n",(0,t.jsxs)(n.p,{children:["Provides event notifications when mouse leaves the iframe.\nThe listener receives an object with the following structure based on ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent",children:"MouseEvent"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    event: {\n        clientX,\n        clientY,\n        movementX,\n        movementY,\n        offsetX,\n        offsetY,\n        pageX,\n        pageY,\n        x,\n        y,\n        screenX,\n        screenY\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"mousemove",children:"mouseMove"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications when mouse moves inside the iframe.\nTis event is triggered on an interval which can be configured by overriding the config.js mouseMoveCallbackInterval property."}),"\n",(0,t.jsxs)(n.p,{children:["The listener receives an object with the following structure based on ",(0,t.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent",children:"MouseEvent"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    event: {\n        clientX,\n        clientY,\n        movementX,\n        movementY,\n        offsetX,\n        offsetY,\n        pageX,\n        pageY,\n        x,\n        y,\n        screenX,\n        screenY\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"participantmenubuttonclick",children:"participantMenuButtonClick"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about a participant context menu button being clicked."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    key: string, // the pressed button's key. The key is as defined in `toolbarButtons` config,\n    participantId: string, // the id of the participant for which the button was clicked,\n    preventExecution: boolean // whether the execution of the button click was prevented or not\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"toolbarbuttonclicked",children:"toolbarButtonClicked"}),"\n",(0,t.jsxs)(n.p,{children:["Provides event notifications about a toolbar button being clicked and whether the click routine was executed or not.\nTo enable this notification you need to add the button to ",(0,t.jsxs)(n.a,{href:"/handbook/docs/dev-guide/dev-guide-configuration#buttonswithnotifyclick",children:[(0,t.jsx)(n.code,{children:"buttonsWithNotifyClick"})," config"]}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    key: string, // the pressed button's key. The key is as defined in `toolbarButtons` config,\n    preventExecution: boolean // whether the click routine execution was prevented or not.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"outgoingmessage",children:"outgoingMessage"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about outgoing chat messages."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    message: string, // the text of the message\n    privateMessage: boolean // whether this is a private or group message\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"displaynamechange",children:"displayNameChange"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about display name changes."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string, // the id of the participant that changed their display name\n    displayname: string // the new display name\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"devicelistchanged",children:"deviceListChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about device list changes."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    devices: Object // the new list of available devices.\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"NOTE:"})," The ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"device"})})," object has the same format as the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"getAvailableDevices"})})," result format."]}),"\n",(0,t.jsx)(n.h3,{id:"emailchange",children:"emailChange"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about email changes."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string, // the id of the participant that changed his email\n    email: string // the new email\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"feedbacksubmitted",children:"feedbackSubmitted"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about conference feedback submissions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    error: string // The error which occurred during submission, if any.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"filmstripdisplaychanged",children:"filmstripDisplayChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event visibility notifications for the filmstrip that is being updated:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    visible: boolean // Whether or not the filmstrip is displayed or hidden.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"moderationstatuschanged",children:"moderationStatusChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about changes to moderation status."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    mediaType: string, // The media type for which moderation changed.\n    enabled: boolean // Whether or not moderation changed to enabled.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"moderationparticipantapproved",children:"moderationParticipantApproved"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about participants approvals for moderation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string, // The ID of the participant that got approved.\n    mediaType: string // The media type for which the participant was approved.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"moderationparticipantrejected",children:"moderationParticipantRejected"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about participants rejections for moderation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string, // The ID of the participant that got rejected.\n    mediaType: string // The media type for which the participant was rejected.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"notificationtriggered",children:"notificationTriggered"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications when an application notification occurs."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    title: string, // The notification title.\n    description: string // The notification description.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"participantjoined",children:"participantJoined"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about new participants who join the room."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string, // the id of the participant\n    displayName: string // the display name of the participant\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"participantkickedout",children:"participantKickedOut"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about participants being removed from the room."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    kicked: {\n        id: string, // the id of the participant removed from the room\n        local: boolean // whether or not the participant is the local particiapnt\n    },\n    kicker: {\n        id: string // the id of the participant who kicked out the other participant\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"participantleft",children:"participantLeft"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about participants that leave the meeting room."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string // the id of the participant\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"participantrolechanged",children:"participantRoleChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications that fire when the local user role has changed (e.g., none, moderator, participant)."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    id: string // the id of the participant\n    role: string // the new role of the participant\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"participantspanetoggled",children:"participantsPaneToggled"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications that fire when the participants pane status changes."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    open: boolean // whether the pane is open or not\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"passwordrequired",children:"passwordRequired"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications that fire when participants fail to join a password protected room."}),"\n",(0,t.jsx)(n.h3,{id:"videoconferencejoined",children:"videoConferenceJoined"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications that fire when the local user has joined the video conference."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    roomName: string, // the room name of the conference\n    id: string, // the id of the local participant\n    displayName: string, // the display name of the local participant\n    avatarURL: string, // the avatar URL of the local participant\n    breakoutRoom: boolean, // whether the current room is a breakout room\n    visitor: boolean // whether the current user is a visitor\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"videoconferenceleft",children:"videoConferenceLeft"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications that fire when the local user has left the video conference."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    roomName: string // the room name of the conference\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"conferencecreatedtimestamp",children:"conferenceCreatedTimestamp"}),"\n",(0,t.jsx)(n.p,{children:"Provides notification of the start time of the video conference."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    timestamp: timestamp // time the conference started\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"videoavailabilitychanged",children:"videoAvailabilityChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about video availability status changes."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    available: boolean // new available status - boolean\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"videomutestatuschanged",children:"videoMuteStatusChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about video mute status changes."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    muted: boolean // new muted status - boolean\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"videoqualitychanged",children:"videoQualityChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about changes to video quality settings."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    videoQuality: number // the height of the resolution related to the new video quality setting.\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"readytoclose",children:"readyToClose"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications that fire when Jitsi Meet is ready to be closed (i.e., hangup operations are completed)."}),"\n",(0,t.jsx)(n.h3,{id:"recordinglinkavailable",children:"recordingLinkAvailable"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about recording link becoming available."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    link: string, // the recording link\n    ttl: number // the time to live of the recording link\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"recordingstatuschanged",children:"recordingStatusChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about recording status changes."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    on: boolean // new recording status - boolean,\n    mode: string // recording mode, `local`, `stream` or `file`,\n    error: string | undefined // error type if recording fails, undefined otherwise\n    transcription: boolean // whether a transcription is active or not\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"subjectchange",children:"subjectChange"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications regarding the change of subject for a conference."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    subject: string // the new subject\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"suspenddetected",children:"suspendDetected"}),"\n",(0,t.jsx)(n.p,{children:"Provides notifications about detecting suspended events in the host computer."}),"\n",(0,t.jsx)(n.h3,{id:"peerconnectionfailure",children:"peerConnectionFailure"}),"\n",(0,t.jsxs)(n.p,{children:["Notify the external application that a PeerConnection lost connectivity. This event is fired only if\na PC ",(0,t.jsx)(n.code,{children:"failed"})," but connectivity to the rtcstats server is still maintained signaling that there is a\nproblem establishing a link between the app and the JVB server or the remote peer in case of P2P.\nWill only fire if rtcstats is enabled."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    // Type of PC, Peer2Peer or JVB connection.\n    isP2P: boolean,\n\n    // Was this connection previously connected. If it was it could mean\n    // that connectivity was disrupted, if not it most likely means that the app could not reach\n    // the JVB server, or the other peer in case of P2P.\n    wasConnected: boolean\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"transcribingstatuschanged",children:"transcribingStatusChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about status changes in the transcribing process."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    on: boolean,\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"transcriptionchunkreceived",children:"transcriptionChunkReceived"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about new transcription chunks being available."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    // Transcription language\n    language: string,\n\n    // ID for this chunk.\n    messageID: string,\n\n    // participant info\n    participant: {\n        avatarUrl: string,\n        id: string\n        name: string,\n    },\n\n    // If the transcription is final, the text will be here.\n    final: string,\n\n    // If the transcription is not final but has high accuracy the text will be here.\n    stable: string,\n\n    // If the transcription is not final but has low accuracy the text will be here.\n    unstable: string,\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"whiteboardstatuschanged",children:"whiteboardStatusChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about changes to the whiteboard."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    status: string // new whiteboard status\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"p2pstatuschanged",children:"p2pStatusChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about changes to the connection type."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    isP2p: boolean|null // whether the new connection type is P2P\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"audioonlychanged",children:"audioOnlyChanged"}),"\n",(0,t.jsx)(n.p,{children:"Provides event notifications about changes to the audio only mode status."}),"\n",(0,t.jsx)(n.p,{children:"The listener receives an object with the following structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"{\n    audioOnlyChanged: boolean // whether the audio only is enabled or disabled.\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>o});var t=i(6540);const a={},r=t.createContext(a);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);