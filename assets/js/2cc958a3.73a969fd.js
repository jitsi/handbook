"use strict";(self.webpackChunk_jitsi_handbook=self.webpackChunk_jitsi_handbook||[]).push([[2661],{1388:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>r});var t=o(4848),i=o(8453);const s={id:"token-authentication",title:"Token Authentication",sidebar_label:"Authentication (Token)"},c=void 0,a={id:"devops-guide/token-authentication",title:"Token Authentication",description:"It is possible to allow only users with a valid token to create new conference",source:"@site/docs/devops-guide/token-authentication.md",sourceDirName:"devops-guide",slug:"/devops-guide/token-authentication",permalink:"/handbook/docs/devops-guide/token-authentication",draft:!1,unlisted:!1,editUrl:"https://github.com/jitsi/handbook/edit/master/docs/devops-guide/token-authentication.md",tags:[],version:"current",lastUpdatedAt:1754337398e3,frontMatter:{id:"token-authentication",title:"Token Authentication",sidebar_label:"Authentication (Token)"},sidebar:"docs",previous:{title:"Authentication (Secure Domain)",permalink:"/handbook/docs/devops-guide/secure-domain"},next:{title:"Authentication (LDAP)",permalink:"/handbook/docs/devops-guide/ldap-authentication"}},d={},r=[{value:"Token package",id:"token-package",level:2},{value:"Prosody configuration",id:"prosody-configuration",level:2},{value:"allow_empty_token",id:"allow_empty_token",level:3},{value:"persistent_lobby",id:"persistent_lobby",level:3},{value:"muc_wait_for_host",id:"muc_wait_for_host",level:3},{value:"Enable anonymous login for guests",id:"enable-anonymous-login-for-guests",level:3},{value:"Jitsi Meet configuration",id:"jitsi-meet-configuration",level:2},{value:"Jicofo configuration",id:"jicofo-configuration",level:2},{value:"Restart the services",id:"restart-the-services",level:2}];function l(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"It is possible to allow only users with a valid token to create new conference\nrooms. After the room is created, others will be able to join from anonymous\ndomain. Here's what has to be configured:"}),"\n",(0,t.jsx)(n.h2,{id:"token-package",children:"Token package"}),"\n",(0,t.jsxs)(n.p,{children:["Install ",(0,t.jsx)(n.code,{children:"jitsi-meet-tokens"})," packages."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"apt-get install jitsi-meet-tokens\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Set ",(0,t.jsx)(n.code,{children:"Application ID"})," and ",(0,t.jsx)(n.code,{children:"Application Secret"})," when asked. This command will add\n",(0,t.jsx)(n.code,{children:"app_id"})," and ",(0,t.jsx)(n.code,{children:"app_secret"})," into the Prosody config and set ",(0,t.jsx)(n.code,{children:"authentication"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"prosody-configuration",children:"Prosody configuration"}),"\n",(0,t.jsxs)(n.p,{children:["If you have installed Jitsi Meet from the Debian package, the changes should be\nmade in ",(0,t.jsx)(n.code,{children:"/etc/prosody/conf.avail/[your-hostname].cfg.lua"})]}),"\n",(0,t.jsxs)(n.p,{children:["In the example below, this hostname is assumed to be ",(0,t.jsx)(n.code,{children:"jitsi.example.com"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"After installing the package you will see the following lines in your Prosody\nconfig:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'VirtualHost "jitsi.example.com"\n    authentication = "token"\n    app_id="myappid"\n    app_secret="myappsecret"\n---\n---\n\nComponent "conference.jitsi.example.com" "muc"\n    ---\n    ---\n    modules_enabled = {\n        ---\n        ---\n        "token_verification";\n        ---\n        ---\n    }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"allow_empty_token",children:"allow_empty_token"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:"allow_empty_token"})," into ",(0,t.jsx)(n.code,{children:"VirtualHost"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'VirtualHost "jitsi.example.com"\n    authentication = "token"\n    app_id="myappid"\n    app_secret="myappsecret"\n    allow_empty_token = true\n'})}),"\n",(0,t.jsx)(n.h3,{id:"persistent_lobby",children:"persistent_lobby"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:"persistent_lobby"})," as module into ",(0,t.jsx)(n.code,{children:"VirtualHost"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'VirtualHost "jitsi.example.com"\n    ---\n    ---\n    modules_enabled = {\n        ---\n        ---\n        "muc_lobby_rooms";\n        "persistent_lobby";\n'})}),"\n",(0,t.jsx)(n.h3,{id:"muc_wait_for_host",children:"muc_wait_for_host"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:"muc_wait_for_host"})," as module into ",(0,t.jsx)(n.code,{children:"Component"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'Component "conference.jitsi.example.com" "muc"\n    ---\n    ---\n    modules_enabled = {\n        ---\n        "token_verification";\n        "muc_wait_for_host";\n    }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"enable-anonymous-login-for-guests",children:"Enable anonymous login for guests"}),"\n",(0,t.jsxs)(n.p,{children:["Add this section ",(0,t.jsx)(n.strong,{children:"after the previous VirtualHost"})," to enable the anonymous\nlogin method for guests:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'VirtualHost "guest.jitsi.example.com"\n    authentication = "jitsi-anonymous"\n    c2s_require_encryption = false\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["Note that ",(0,t.jsx)(n.code,{children:"guest.jitsi.example.com"})," is internal to Jitsi, and you do not need\nto (and should not) create a DNS record for it, or generate an SSL/TLS\ncertificate, or do any web server configuration. While it is internal, you\nshould still replace ",(0,t.jsx)(n.code,{children:"jitsi.example.com"})," with your hostname."]})}),"\n",(0,t.jsx)(n.h2,{id:"jitsi-meet-configuration",children:"Jitsi Meet configuration"}),"\n",(0,t.jsxs)(n.p,{children:["In config.js, the ",(0,t.jsx)(n.code,{children:"anonymousdomain"})," options has to be set."]}),"\n",(0,t.jsxs)(n.p,{children:["If you have installed jitsi-meet from the Debian package, these changes should\nbe made in ",(0,t.jsx)(n.code,{children:"/etc/jitsi/meet/[your-hostname]-config.js"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"var config = {\n    hosts: {\n        domain: 'jitsi.example.com',\n        anonymousdomain: 'guest.jitsi.example.com',\n        // ...\n    },\n    // ...\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["You will see your own hostname instead of ",(0,t.jsx)(n.code,{children:"jitsi.example.com"})," in your config\nfile. You should add only the ",(0,t.jsx)(n.code,{children:"anonymousdomain"})," line. Be carefull of commas."]}),"\n",(0,t.jsx)(n.h2,{id:"jicofo-configuration",children:"Jicofo configuration"}),"\n",(0,t.jsxs)(n.p,{children:["No need to update anything in Jicofo config. Some out-dated documents recommend\nto enable the authentication in ",(0,t.jsx)(n.code,{children:"jicofo.conf"}),". Don't do that. The authentication\nmust be disabled in ",(0,t.jsx)(n.code,{children:"jicofo.conf"})," when the ",(0,t.jsx)(n.code,{children:"token"})," authentication is active."]}),"\n",(0,t.jsxs)(n.p,{children:["Simply keep ",(0,t.jsx)(n.code,{children:"jicofo.conf"})," as it is without changing anything."]}),"\n",(0,t.jsx)(n.h2,{id:"restart-the-services",children:"Restart the services"}),"\n",(0,t.jsxs)(n.p,{children:["Restart prosody, jicofo and jitsi-videobridge2 as ",(0,t.jsx)(n.code,{children:"root"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"systemctl restart prosody\nsystemctl restart jicofo\nsystemctl restart jitsi-videobridge2\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>a});var t=o(6540);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);